Folder Structure
--------------------------------------------------
/
    app.css
    app.d.ts
    app.html
lib/
    index.ts
    utils.ts
    components/
        HealthMonitor.svelte
        ui/
            button/
                button.svelte
                index.ts
    hooks/
    services/
        api/
            base.ts
            index.ts
            auth/
                auth.service.ts
                index.ts
            health/
                health.service.ts
                index.ts
            users/
                index.ts
                users.service.ts
    types/
        Result.ts
        api/
            ApiError.ts
            ApiResult.ts
        generated/
            ApiErrorResponse.ts
            Board.ts
            CreateUserRequest.ts
            HealthResponse.ts
            LoginRequest.ts
            LoginResponse.ts
            Report.ts
            ReportResponse.ts
            ReportType.ts
            TokenClaims.ts
            User.ts
            UserResponse.ts
            UserRole.ts
routes/
    +layout.svelte
    +layout.ts
    +page.svelte
    about/
        +page.svelte
    health-check-page/
        +page.svelte
        +page.ts
    [slug]/
        +page.svelte


File Contents
--------------------------------------------------


./src/app.css
File type: .css
@import "tailwindcss";

@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.129 0.042 264.695);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.129 0.042 264.695);
  --primary: oklch(0.208 0.042 265.755);
  --primary-foreground: oklch(0.984 0.003 247.858);
  --secondary: oklch(0.968 0.007 247.896);
  --secondary-foreground: oklch(0.208 0.042 265.755);
  --muted: oklch(0.968 0.007 247.896);
  --muted-foreground: oklch(0.554 0.046 257.417);
  --accent: oklch(0.968 0.007 247.896);
  --accent-foreground: oklch(0.208 0.042 265.755);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.929 0.013 255.508);
  --input: oklch(0.929 0.013 255.508);
  --ring: oklch(0.704 0.04 256.788);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.984 0.003 247.858);
  --sidebar-foreground: oklch(0.129 0.042 264.695);
  --sidebar-primary: oklch(0.208 0.042 265.755);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.968 0.007 247.896);
  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
  --sidebar-border: oklch(0.929 0.013 255.508);
  --sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
  --card: oklch(0.208 0.042 265.755);
  --card-foreground: oklch(0.984 0.003 247.858);
  --popover: oklch(0.208 0.042 265.755);
  --popover-foreground: oklch(0.984 0.003 247.858);
  --primary: oklch(0.929 0.013 255.508);
  --primary-foreground: oklch(0.208 0.042 265.755);
  --secondary: oklch(0.279 0.041 260.031);
  --secondary-foreground: oklch(0.984 0.003 247.858);
  --muted: oklch(0.279 0.041 260.031);
  --muted-foreground: oklch(0.704 0.04 256.788);
  --accent: oklch(0.279 0.041 260.031);
  --accent-foreground: oklch(0.984 0.003 247.858);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.208 0.042 265.755);
  --sidebar-foreground: oklch(0.984 0.003 247.858);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.279 0.041 260.031);
  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

--------------------------------------------------
File End
--------------------------------------------------


./src/app.d.ts
File type: .ts
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};


--------------------------------------------------
File End
--------------------------------------------------


./src/app.html
File type: .html
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\index.ts
File type: .ts
// place files you want to import through the `$lib` alias in this folder.


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\utils.ts
File type: .ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type WithoutChild<T> = T extends { child?: any } ? Omit<T, "child"> : T;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type WithoutChildren<T> = T extends { children?: any } ? Omit<T, "children"> : T;
export type WithoutChildrenOrChild<T> = WithoutChildren<WithoutChild<T>>;
export type WithElementRef<T, U extends HTMLElement = HTMLElement> = T & { ref?: U | null };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\components\HealthMonitor.svelte
File type: .svelte
<script lang="ts">
	import { healthService } from '$lib/services/api';
	import { ApiError } from '$lib/types/api/ApiError';
	import type { HealthResponse } from '$lib/types/generated/HealthResponse';
	import { isOk } from '$lib/types/Result';
	import Button from './ui/button/button.svelte';

	let healthStatus = $state<HealthResponse | null>(null);
	let errorMessage = $state<string | null>(null);
	let isLoading = $state<boolean>(false);

	async function checkApiHealth() {
		isLoading = true;
		errorMessage = null;
		healthStatus = null;

		const result = await healthService.fetchHealthStatus();

		if (isOk(result)) {
			healthStatus = result.data;
		} else {
			const error = result.error;
			if (error instanceof ApiError) {
				errorMessage = `API Error (${error.status}): ${error.message}`;
			} else {
				errorMessage = error.message;
			}
		}

		isLoading = false;
	}
</script>

<div>
	<Button onclick={checkApiHealth} disabled={isLoading}>
		{isLoading ? 'Checking API Health...' : 'Check API Health'}
	</Button>

	{#if healthStatus}
		<p class="text-green-500">
			<strong>Status:</strong>
			{healthStatus.status} - {healthStatus.message}
		</p>
	{/if}

	{#if errorMessage}
		<p class="text-red-500">
			<strong>Error:</strong>
			{errorMessage}
		</p>
	{/if}
</div>


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\components\ui\button\button.svelte
File type: .svelte
<script lang="ts" module>
	import { cn, type WithElementRef } from '$lib/utils.js';
	import type { HTMLAnchorAttributes, HTMLButtonAttributes } from 'svelte/elements';
	import { tv, type VariantProps } from 'tailwind-variants';

	export const buttonVariants = tv({
		base: "focus-visible:border-ring cursor-pointer focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive inline-flex shrink-0 items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium outline-none transition-all focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0",
		variants: {
			variant: {
				default: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
				destructive:
					'bg-destructive shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60 text-white',
				outline:
					'bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 border',
				secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
				ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',
				link: 'text-primary underline-offset-4 hover:underline'
			},
			size: {
				default: 'h-9 px-4 py-2 has-[>svg]:px-3',
				sm: 'h-8 gap-1.5 rounded-md px-3 has-[>svg]:px-2.5',
				lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
				icon: 'size-9'
			}
		},
		defaultVariants: {
			variant: 'default',
			size: 'default'
		}
	});

	export type ButtonVariant = VariantProps<typeof buttonVariants>['variant'];
	export type ButtonSize = VariantProps<typeof buttonVariants>['size'];

	export type ButtonProps = WithElementRef<HTMLButtonAttributes> &
		WithElementRef<HTMLAnchorAttributes> & {
			variant?: ButtonVariant;
			size?: ButtonSize;
		};
</script>

<script lang="ts">
	let {
		class: className,
		variant = 'default',
		size = 'default',
		ref = $bindable(null),
		href = undefined,
		type = 'button',
		disabled,
		children,
		...restProps
	}: ButtonProps = $props();
</script>

{#if href}
	<a
		bind:this={ref}
		data-slot="button"
		class={cn(buttonVariants({ variant, size }), className)}
		href={disabled ? undefined : href}
		aria-disabled={disabled}
		role={disabled ? 'link' : undefined}
		tabindex={disabled ? -1 : undefined}
		{...restProps}
	>
		{@render children?.()}
	</a>
{:else}
	<button
		bind:this={ref}
		data-slot="button"
		class={cn(buttonVariants({ variant, size }), className)}
		{type}
		{disabled}
		{...restProps}
	>
		{@render children?.()}
	</button>
{/if}


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\components\ui\button\index.ts
File type: .ts
import Root, {
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
	buttonVariants,
} from "./button.svelte";

export {
	Root,
	type ButtonProps as Props,
	//
	Root as Button,
	buttonVariants,
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
};


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\services\api\base.ts
File type: .ts
import { ApiError, NetworkError } from '$lib/types/api/ApiError';
import type { ApiResult } from '$lib/types/api/ApiResult';
import { err, ok } from '$lib/types/Result';

const API_BASE_URL = '/api';

async function makeRequest<T>(
    endpoint: string,
    options: RequestInit = {}
): Promise<ApiResult<T>> {
    try {
        const response = await fetch(`${API_BASE_URL}/${endpoint}`, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
            ...options,
        });

        if (!response.ok) {
            let errorData;
            try {
                errorData = await response.json();
            } catch {
                errorData = { error: `HTTP ${response.status}` };
            }
            return err(new ApiError(errorData.error || 'Request failed', response.status, errorData));
        }

        const data = await response.json();
        return ok(data);
    } catch (error) {
        return err(new NetworkError(
            `Network error or unexpected issue with ${endpoint}`,
            error
        ));
    }
}

export async function get<T>(endpoint: string): Promise<ApiResult<T>> {
    return makeRequest<T>(endpoint, { method: 'GET' });
}

export async function post<T>(endpoint: string, data?: unknown): Promise<ApiResult<T>> {
    return makeRequest<T>(endpoint, {
        method: 'POST',
        body: data ? JSON.stringify(data) : undefined,
    });
}

export async function put<T>(endpoint: string, data?: unknown): Promise<ApiResult<T>> {
    return makeRequest<T>(endpoint, {
        method: 'PUT',
        body: data ? JSON.stringify(data) : undefined,
    });
}

export async function del<T>(endpoint: string): Promise<ApiResult<T>> {
    return makeRequest<T>(endpoint, { method: 'DELETE' });
}

--------------------------------------------------
File End
--------------------------------------------------


./src/lib\services\api\index.ts
File type: .ts
export * as authService from './auth';
export * as healthService from './health';
export * as usersService from './users';



--------------------------------------------------
File End
--------------------------------------------------


./src/lib\services\api\auth\auth.service.ts
File type: .ts
import type { ApiResult } from "$lib/types/api/ApiResult";
import type { LoginRequest } from "$lib/types/generated/LoginRequest";
import type { LoginResponse } from "$lib/types/generated/LoginResponse";
import { post } from "../base";

export async function login(loginRequest: LoginRequest): Promise<ApiResult<LoginResponse>> {
    return post<LoginResponse>("/auth/login", loginRequest);
}

--------------------------------------------------
File End
--------------------------------------------------


./src/lib\services\api\auth\index.ts
File type: .ts
export * from './auth.service';


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\services\api\health\health.service.ts
File type: .ts
import type { ApiResult } from '$lib/types/api/ApiResult';
import type { HealthResponse } from '$lib/types/generated/HealthResponse';
import { get } from '../base';

export async function fetchHealthStatus(): Promise<ApiResult<HealthResponse>> {
    return get<HealthResponse>('health');
}


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\services\api\health\index.ts
File type: .ts
export * from './health.service';



--------------------------------------------------
File End
--------------------------------------------------


./src/lib\services\api\users\index.ts
File type: .ts
export * from './users.service';


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\services\api\users\users.service.ts
File type: .ts
import type { ApiResult } from "$lib/types/api/ApiResult";
import type { UserResponse } from "$lib/types/generated/UserResponse";
import { get } from "../base";

export async function getMe(): Promise<ApiResult<UserResponse>> {
    return get<UserResponse>('/users/me');
}

--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\Result.ts
File type: .ts
export type Result<T, E = Error> =
    | { success: true; data: T }
    | { success: false; error: E };

export const ok = <T>(data: T): Result<T, never> => ({ success: true, data });
export const err = <E>(error: E): Result<never, E> => ({ success: false, error });

export const isOk = <T, E>(result: Result<T, E>): result is { success: true; data: T } =>
    result.success;

export const isErr = <T, E>(result: Result<T, E>): result is { success: false; error: E } =>
    !result.success;


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\api\ApiError.ts
File type: .ts
export class ApiError extends Error {
    constructor(
        message: string,
        public readonly status: number,
        public readonly data?: unknown
    ) {
        super(message);
        this.name = 'ApiError';

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if ('captureStackTrace' in Error && typeof (Error as any).captureStackTrace === 'function') {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (Error as any).captureStackTrace(this, this.constructor);
        }
    }
}

export class NetworkError extends Error {
    constructor(message: string, public readonly cause?: unknown) {
        super(message);
        this.name = 'NetworkError';

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if ('captureStackTrace' in Error && typeof (Error as any).captureStackTrace === 'function') {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (Error as any).captureStackTrace(this, this.constructor);
        }
    }
}

export type ApiErrorType = ApiError | NetworkError

export function isApiError(error: unknown): error is ApiError {
    return error instanceof ApiError;
}

export function isNetworkError(error: unknown): error is NetworkError {
    return error instanceof NetworkError;
}


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\api\ApiResult.ts
File type: .ts
import type { ApiErrorType } from "$lib/types/api/ApiError";
import type { Result } from "../Result";

export type ApiResult<T> = Result<T, ApiErrorType>


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\ApiErrorResponse.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type ApiErrorResponse = { error: string, details?: string, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\Board.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type Board = { id: string, name: string, description: string | null, owner_id: string, is_default: boolean, created_at: string, updated_at: string, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\CreateUserRequest.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { UserRole } from "./UserRole";

export type CreateUserRequest = { email: string, password: string, first_name: string | null, last_name: string | null, role: UserRole, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\HealthResponse.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HealthResponse = { status: string, message: string, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\LoginRequest.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type LoginRequest = { email: string, password: string, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\LoginResponse.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { UserResponse } from "./UserResponse";

export type LoginResponse = { access_token: string, token_type: string, user: UserResponse, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\Report.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ReportType } from "./ReportType";

export type Report = { id: string, user_id: string, board_id: string, report_type: ReportType, title: string, description: string | null, file_path: string, url: string | null, created_at: string, updated_at: string, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\ReportResponse.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type ReportResponse = { id: string, title: string, description: string | null, file_path: string, url: string | null, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\ReportType.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type ReportType = "Screenshot" | "Video";


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\TokenClaims.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type TokenClaims = { sub: string, role: string, exp: number, iat: number, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\User.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { UserRole } from "./UserRole";

export type User = { id: string, email: string, password_hash: string, first_name: string | null, last_name: string | null, role: UserRole, created_at: string, updated_at: string, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\UserResponse.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { UserRole } from "./UserRole";

export type UserResponse = { id: string, email: string, first_name: string | null, last_name: string | null, role: UserRole, };


--------------------------------------------------
File End
--------------------------------------------------


./src/lib\types\generated\UserRole.ts
File type: .ts
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type UserRole = "Admin" | "User";


--------------------------------------------------
File End
--------------------------------------------------


./src/routes\+layout.svelte
File type: .svelte
<script lang="ts">
	import '../app.css';

	let { children } = $props();
</script>

{@render children()}


--------------------------------------------------
File End
--------------------------------------------------


./src/routes\+layout.ts
File type: .ts
export const prerender = false;
export const csr = true;
export const ssr = false;


--------------------------------------------------
File End
--------------------------------------------------


./src/routes\+page.svelte
File type: .svelte
<script lang="ts">
	import HealthMonitor from '$lib/components/HealthMonitor.svelte';
	import { Button } from '$lib/components/ui/button';

	let count = $state(0);
</script>

<main class="p-4">
	<h1 class="text-3xl">Welcome to SvelteKit</h1>
	<p>
		Visit <a href="https://svelte.dev/docs/kit">svelte.dev/docs/kit</a> to read the documentation
	</p>

	<div class="flex flex-col">
		<a href="about" class="text-blue-500">About</a>
		<a href="dynamic-route" class="text-blue-500">Dynamic route</a>
	</div>

	<Button onclick={() => count++}>
		Click: {count}
	</Button>

	<HealthMonitor />

	<p style="margin-top: 1rem;">
		<a href="/health-check-page"
			>View dedicated health status page (data loaded server-side/on navigation)</a
		>
	</p>
</main>


--------------------------------------------------
File End
--------------------------------------------------


./src/routes\about\+page.svelte
File type: .svelte
This is the about page.


--------------------------------------------------
File End
--------------------------------------------------


./src/routes\health-check-page\+page.svelte
File type: .svelte
<script lang="ts">
	import type { PageData } from './$types';

	let { data }: { data: PageData } = $props();
</script>

<div class="p-2">
	<h1>API Health Status (via +page.ts load function)</h1>

	{#if data.healthStatus}
		<p class="text-green-500">
			<strong>Status:</strong>
			{data.healthStatus.status} - {data.healthStatus.message}
		</p>
	{:else if data.error}
		<p class="text-red-500">
			<strong>Error:</strong>
			{data.error}
		</p>
	{:else}
		<p>Loading status or an unexpected error occurred...</p>
	{/if}

	<p><a href="/">Go Home</a></p>
</div>


--------------------------------------------------
File End
--------------------------------------------------


./src/routes\health-check-page\+page.ts
File type: .ts
import { healthService } from '$lib/services/api';
import { ApiError } from '$lib/types/api/ApiError';
import type { PageLoad } from './$types';

export const load: PageLoad = async () => {
    const result = await healthService.fetchHealthStatus();

    if (result.success) {
        return {
            healthStatus: result.data,
            error: null,
        };
    } else {
        console.error('Failed to load health status:', result.error);
        return {
            healthStatus: null,
            error: result.error.message,
            errorCode: result.error instanceof ApiError ? result.error.status : null,
        };
    }
};


--------------------------------------------------
File End
--------------------------------------------------


./src/routes\[slug]\+page.svelte
File type: .svelte
<script>
	import { page } from '$app/stores';
</script>

This route is dynamic: {$page.params.slug}.


--------------------------------------------------
File End
--------------------------------------------------
